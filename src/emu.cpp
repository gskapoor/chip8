#include "emu.h"

#include <algorithm>

// Starts the emulator up
Emulator::Emulator() {
    std::cout << "making an emulator" << std::endl;

    // Make sure to set all entries in the display to 0
    for (auto &row: displayBuffer){
        for (uint8_t &elem: row){
            elem = 0;
        }
    }

    std::array<u_int8_t, 80> font = { 
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F 
    };

    std::copy(font.begin(), font.end(), memory.begin());

    std::cout << memory.data() << std::endl;

}

Emulator::~Emulator() {
    std::cout << "dead" << std::endl;
}

// void Emulator::run(const std::vector<uint16_t> &instructions) {
//     std::cout << "I'm running" << std::endl;
// }